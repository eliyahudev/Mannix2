
//##################################################################################
//
//		     Copyright(c) Spectral Design & Test Inc.
//     All Rights reserved under the Copyright laws of the United States of America.
//
//##################################################################################
//
//  This file includes the Confidential information of Spectral Design
//  & Test Inc. The receiver of this Confidential Information shall not
//  disclose it to any third party and shall protect its confidentiality
//  by using the same degree of care, but not less then a reasonable
//  degree of care, as the receiver uses to protect receiver's own
//  Confidential Information.
//
//  Licensee acknowledges and agrees that the Licensee is not authorized
//  to alter or change the EDA models generated by Spectral Design & Test Inc.
//  for the Licensee.
//
//			Spectral Design & Test Inc.
//                      64 E Main Street,
//                      Somerville,NJ 08876,USA.
//
//
//##################################################################################
//
//	IP Type			: Single Port RAM
//	Model Type		: Verilog Behavioral Model
//	Configuration		: 4096x16 
//	Model Version		: 1.92
//	Generation Date		: 06/17/19
//
//##################################################################################

//##################################################################################
//      Model name              : ram_4096x16
//      Number of words         : 4096
//      Number of Bits/word     : 16
//##################################################################################

`celldefine
`timescale 1ns/1fs


module spram_4096x16m16b1pm2re1  ( BISTE, AWT, CLK, TCLK, CE, TCE, WE, TWE, BWM, TBWM, A, TA, D, TD, Q, RM, WM, RA, LVTEST, SZ, SL, BADIO, HN, SD, VSB100, VSB200, VSB300, VSB400);

    //////////////////////////////////////////////
    // PARAMETERS
    //////////////////////////////////////////////
        parameter ADDRESS_BITS         = 12;
        parameter FCADDRESS1_BITS      = 16;
        parameter FCADDRESS2_BITS      = 1;
        parameter D_WIDTH              = 16;
        parameter WORDS                = 4096;
        parameter RM_WIDTH              = 3;
        parameter RM_DEF               = {3'b011};
        parameter WM_DEF               = {3'b111};
        parameter MUX                  = 16;
        parameter RED_BITS             = 1;
        parameter BWM_WIDTH            = 16;
        parameter DATA_WIDTH_XBY       = {1{1'bx}};
        parameter DATA_WIDTH_X         = {D_WIDTH{1'bx}};
        parameter DATA_WIDTH_0         = {D_WIDTH{1'b0}};
        parameter DATA_WIDTH_1         = {D_WIDTH{1'b1}};
    parameter DATAnRED_WIDTH_X     = {(D_WIDTH+RED_BITS*1){1'bx}};
    parameter DATAnRED_WIDTH_0     = {(D_WIDTH+RED_BITS*1){1'b0}};
        parameter WORDS_WIDTH_X        = {WORDS{1'bx}};
        parameter WORDS_WIDTH_0        = {WORDS{1'b0}};
        parameter ADDR_WIDTH_X         = {ADDRESS_BITS{1'bx}};
        parameter ADDR_WIDTH_0         = {ADDRESS_BITS{1'b0}};
    parameter FCADDR1_WIDTH_0      = {FCADDRESS1_BITS{1'b0}};
    parameter FCADDR2_WIDTH_0      = {FCADDRESS2_BITS{1'b0}};

    /////////////////////////////////////////////
    // Inputs/Outputs
    /////////////////////////////////////////////
           input                       BISTE; 
           input                       AWT; 
           input                       CLK; 
           input                       TCLK; 
           input                       CE; 
           input                       TCE; 
           input                       WE; 
           input                       TWE; 
           input  [BWM_WIDTH-1:0]   BWM; 
           input  [BWM_WIDTH-1:0]   TBWM; 
           input  [ADDRESS_BITS-1:0]   A; 
           input  [ADDRESS_BITS-1:0]   TA; 
           input  [D_WIDTH-1:0]   D; 
           input  [D_WIDTH-1:0]   TD; 
           output  [D_WIDTH-1:0]     Q; 
           input  [RM_WIDTH-1:0]   RM; 
           input  [RM_WIDTH-1:0]   WM; 
           input                       RA; 
           input                       LVTEST; 
           input                       SZ; 
           input                       SL; 
           input  [FCADDRESS1_BITS-1:0]   BADIO; 
           input                       HN; 
           input                       SD; 
           input                       VSB100; 
           input                       VSB200; 
           input                       VSB300; 
           input                       VSB400; 

   integer i,j, k;
    //////////////////////////////////////////////
    // Registers
    //////////////////////////////////////////////
      reg  [9:0] count;       
      reg  [0:15] temp;       
      reg  write_disable;       
      reg  read_disable;       
      `define YES  1'b1       
      `define NO  1'b0       
      reg  [D_WIDTH-1+RED_BITS*1:0] MEM_ARRAY [WORDS-1:0];       // memory array 
      reg  [D_WIDTH-1+RED_BITS*2:0] DATAnRED;
      reg  [15+RED_BITS:0] DATAnREDL;
      reg  [0+RED_BITS:0] DATAnREDR;
      reg  [15:0] DATAL;
      reg  [15:0] DINL;
      reg  [0:0] DINR;
      reg  [15:0] BYML;
      reg  [0:0] BYMR;
      reg  [D_WIDTH-1+RED_BITS*2:0] write_mask_enable;

`ifdef  rtl_functionality_1
`else
        reg BIST_notifier ;
        reg BISTM_notifier ;
        reg CLK_notifier ;
        reg CE_notifier ;
        reg RWB_notifier ;
        reg BYM_notifier ;
        reg TBYM_notifier ;
        reg ADDR_notifier ;
        reg DIN_notifier ;
        reg TDIN_notifier ;
        reg RM_notifier ;
        reg WM_notifier ;
        reg RA_notifier ;
        reg LV_notifier ;
        reg SZ_notifier ;
        reg SL_notifier ;
        reg BADIO_notifier ;
        reg HN_notifier ;
        reg SD_notifier ;
        reg VSB1_notifier ;
        reg VSB2_notifier ;
        reg VSB3_notifier ;
        reg VSB4_notifier ;

`endif
      reg                  prev_CLK;                    // stores clock's previous state
      reg                  prev_CE;                     // stores CSB's previous state
      reg                  prev_hibernate;                     // stores hibernate previous state
      reg                  prev_slumber;                     // stores hibernate previous state

    // latched version of inputs
        reg CE_int ;
        reg RWE_int ;
        reg [BWM_WIDTH - 1:0] BYM_int ;
        reg [ADDRESS_BITS - 1:0] ADDR_int ;
        reg [D_WIDTH - 1:0] DIN_int ;
        reg [D_WIDTH - 1:0] TDIN_int ;
        reg [RM_WIDTH - 1:0] RM_int ;
        reg [RM_WIDTH - 1:0] WM_int ;
        reg RA_int ;
        reg LV_int ;
        reg [FCADDRESS1_BITS - 1:0] FC1A_int ;

    // outputs before output latch/////////
      reg    [D_WIDTH-1:0]     DOUT_int;
    //////////////////////////////////////
      reg                        ram_mode;
      reg                        ram_mode_x;
      reg                        ram_write_mode; 
      reg                        ram_read_mode; 
      reg                        memory_active;
      reg                        memory_active_x;

    //////////////////////////////////////////////
    // Wires
    //////////////////////////////////////////////

        wire BIST_w ;
        wire AWT_w ;
        wire CLK_w1 ;
        wire TCLK_w1 ;
        wire CE_w1 ;
        wire TCE_w1 ;
        wire RWE_w1 ;
        wire TRWE_w1 ;
        wire [BWM_WIDTH - 1:0] BYM_w1 ;
        wire [BWM_WIDTH - 1:0] TBYM_w1 ;
        wire [ADDRESS_BITS - 1:0] ADDR_w1 ;
        wire [ADDRESS_BITS - 1:0] TADDR_w1 ;
        wire [D_WIDTH - 1:0] DIN_w1 ;
        wire [D_WIDTH - 1:0] TDIN_w1 ;
        wire [D_WIDTH - 1:0] DOUT_w ;
        wire [RM_WIDTH - 1:0] RM_w1 ;
        wire [RM_WIDTH - 1:0] WM_w1 ;
        wire RA_w1 ;
        wire LV_w1 ;
        wire SZ_w ;
        wire SL_w ;
        wire [FCADDRESS1_BITS - 1:0] FC1A_w ;
        wire HN_w ;
        wire SD_w ;
        wire VSB1_w ;
        wire VSB2_w ;
        wire VSB3_w ;
        wire VSB4_w ;

        wire CLK_w ;
        wire CE_w ;
        wire RWE_w ;
        wire [BWM_WIDTH - 1:0] BYM_w ;
        wire [ADDRESS_BITS - 1:0] ADDR_w ;
        wire [D_WIDTH - 1:0] DIN_w ;

    wire Nce;
    assign Nce = !CE_int; 
    wire NslANszANhnANsd;
    assign NslANszANhnANsd = !SL_w && !SZ_w && !HN_w && !SD_w; 
    wire NslANszANhnANsdANbiste;
    assign NslANszANhnANsdANbiste = !SL_w && !SZ_w && !HN_w && !SD_w && !BIST_w; 
    wire NslANszANhnANsdAbiste;
    assign NslANszANhnANsdAbiste = !SL_w && !SZ_w && !HN_w && !SD_w && BIST_w; 
    wire NslANszANhnAsd;
    assign NslANszANhnAsd = !SL_w && !SZ_w && !HN_w && SD_w; 
    wire NslANszAhnANsd;
    assign NslANszAhnANsd = !SL_w && !SZ_w && HN_w && !SD_w; 
    wire NslANszAhnAsd;
    assign NslANszAhnAsd = !SL_w && !SZ_w && HN_w && SD_w; 
    wire NslAszANhnANsd;
    assign NslAszANhnANsd = !SL_w && SZ_w && !HN_w && !SD_w; 
    wire ce;
    assign ce = CE_int; 
    wire ceANslANszANhnANsdANbiste;
    assign ceANslANszANhnANsdANbiste = CE_int && !SL_w && !SZ_w && !HN_w && !SD_w && !BIST_w; 
    wire slANszANhnANsd;
    assign slANszANhnANsd = SL_w && !SZ_w && !HN_w && !SD_w; 
    wire tce;
    assign tce = CE_int; 
    wire tceANslANszANhnANsdAbiste;
    assign tceANslANszANhnANsdAbiste = CE_int && !SL_w && !SZ_w && !HN_w && !SD_w && BIST_w; 
    wire tweAtceANawtANslANszANhnANsdAbiste;
    assign tweAtceANawtANslANszANhnANsdAbiste = RWE_int && CE_int && !AWT_w && !SL_w && !SZ_w && !HN_w && !SD_w && BIST_w; 
    wire weAceANawtANslANszANhnANsdANbiste;
    assign weAceANawtANslANszANhnANsdANbiste = RWE_int && CE_int && !AWT_w && !SL_w && !SZ_w && !HN_w && !SD_w && !BIST_w; 

      reg MESSAGE;

    //////////////////////////////////////////////
    // initialize memory array to X
    //////////////////////////////////////////////

        initial   $readmemb("reset.dat",MEM_ARRAY);
    initial
    begin
          write_disable = `NO; 
          read_disable = `NO;

          MESSAGE = 1'b1;
`ifdef disable_all_msgs
          MESSAGE = 1'b0;
`endif
`ifdef disable_msgs
          MESSAGE = 1'b0;
`endif

    end
        always @(posedge CLK_w) 
           begin
             if((CE_int == 1'b1) && (RM != RM_DEF) && MESSAGE)
             begin
               $display("Error : the instance %m RM is not set as the required value!");
               $display("	 the RM is %b and the required value is %b",RM,RM_DEF);
                x_ram_output;
             end
           end
        always @(posedge CLK_w) 
           begin
             if((CE_int == 1'b1) && (WM != WM_DEF) && MESSAGE)
             begin
               $display("Error : the instance %m WM is not set as the required value!!");
               $display("	 the WM is %b and the required value is %b. Corrupting Entire Memory",WM,WM_DEF);
                x_memory;
             end
           end


        always @( VSB1_w | VSB2_w | VSB3_w | VSB4_w)
        begin
             if (VSB1_w == 1'b0 && VSB2_w == 1'b0 && VSB3_w == 1'b0 && VSB4_w == 1'b0 ) begin
if (MESSAGE)                       $display("			Time %t (MD): VSB100 VSB200 VSB300 VSB400 Invalid values " , $realtime);
             end
        end
                always @( VSB1_w )
        begin
             if (VSB1_w === 1'bx) begin
if (MESSAGE)                       $display("			Time %t (MD): VSB100 UnKnown Corrupting the Entire Memory" , $realtime);

                   x_memory_force;
                   x_ram_output;
             end
        end
        always @( VSB2_w )
        begin
             if (VSB2_w === 1'bx) begin
if (MESSAGE)                       $display("			Time %t (MD): VSB200 UnKnown Corrupting the Entire Memory" , $realtime);

                   x_memory_force;
                   x_ram_output;
             end
        end
        always @( VSB3_w )
        begin
             if (VSB3_w === 1'bx) begin
if (MESSAGE)                       $display("			Time %t (MD): VSB300 UnKnown Corrupting the Entire Memory" , $realtime);
                   x_memory_force;
                   x_ram_output;
             end
        end
        always @( VSB4_w )
        begin
             if (VSB4_w === 1'bx) begin
if (MESSAGE)                       $display("			Time %t (MD): VSB400 UnKnown Corrupting the Entire Memory" , $realtime);
                   x_memory_force;
                   x_ram_output;
             end
        end
        always @( RM_int[0]  )
        begin
        if ( RM_int[0]  === 1'bx) begin
                if (RWE_int == 1'b1) begin
                       if (HN_w == 1'b0 && SL_w == 1'b0 && SZ_w == 1'b0) begin
if (MESSAGE)                       $display("			Time %t (MD): RM_int[0] Pin Enabled Corrupting the Entire Memory" , $realtime);
                       end 

                   x_memory;
                   x_ram_output;
                end
                else
                begin
                   x_ram_output;
                end
             end
        end
        always @( RM_int[1]  )
        begin
        if ( RM_int[1]  === 1'bx) begin
                if (RWE_int == 1'b1) begin
                       if (HN_w == 1'b0 && SL_w == 1'b0 && SZ_w == 1'b0) begin
if (MESSAGE)                       $display("			Time %t (MD): RM_int[1] Pin Enabled Corrupting the Entire Memory" , $realtime);
                       end 

                   x_memory;
                   x_ram_output;
                end
                else
                begin
                   x_ram_output;
                end
             end
        end
        always @( RM_int[2]  )
        begin
        if ( RM_int[2]  === 1'bx) begin
                if (RWE_int == 1'b1) begin
                       if (HN_w == 1'b0 && SL_w == 1'b0 && SZ_w == 1'b0) begin
if (MESSAGE)                       $display("			Time %t (MD): RM_int[2] Pin Enabled Corrupting the Entire Memory" , $realtime);
                       end 

                   x_memory;
                   x_ram_output;
                end
                else
                begin
                   x_ram_output;
                end
             end
        end

    task check_states_power_down;
        casez ( { SD_w,HN_w,SL_w,SZ_w } )
            4'b0000 : ; //STANDBY
            4'b0001 :
            begin
                $display("			Time %t (MD): SNOOZE-MODE ", $realtime);
            end
            4'b0010 :
            begin
                $display("			Time %t (MD): SLUMBER-MODE ", $realtime);
            end
            4'b0011 :
            begin
                $display("			Time %t (MD): SLUMBER-MODE ", $realtime);
            end
            4'b01?? :
            begin
                $display("			Time %t (MD): HIBERNATE-MODE ", $realtime);
            end
            4'b1??? :
            begin
                $display("			Time %t (MD): SHUTDOWN-MODE ", $realtime);
                x_memory;
                zero_all_outputs;
                
            end
            4'bx??? :
            begin
                $display("			Time %t (MD): Unknown SD ", $realtime);
                x_memory;
                x_ram_output;
            end
                    4'b?x?? :
            begin
                $display("			Time %t (MD): Unknown HIBERNATE ", $realtime);
                x_memory;
                x_ram_output;
            end
                    4'b??x? :
            begin
                $display("			Time %t (MD): Unknown SL ", $realtime);
                x_memory;
                x_ram_output;
            end
                    4'b???x :
            begin
                $display("			Time %t (MD): Unknown SZ ", $realtime);
                x_memory;
                x_ram_output;
            end
                endcase
    endtask



   always @(SZ_w or SL_w or HN_w or SD_w)
   begin 
     check_states_power_down;
   end
    always @(SL_w)
    begin
        if(SL_w == 1'b0)
        begin
            x_ram_output;
        end
    end
    always @(HN_w)
    begin
        if(HN_w == 1'b0)
        begin
            x_ram_output;
        end
    end
    always @(SD_w)
    begin
        if(SD_w == 1'b0)
        begin
            x_ram_output;
        end
    end

   always @ (negedge CLK_w )
   begin
    write_disable = `YES; 
    read_disable = `YES; 
   end
    //////////////////////////////////////////////
    // buffers for inputs/outputs
    //////////////////////////////////////////////
   buf 
   (BIST_w,BISTE); 
   buf 
   (AWT_w,AWT); 
   buf 
   (CLK_w1,CLK); 
   buf 
   (TCLK_w1,TCLK); 
   buf 
   (CE_w1,CE); 
   buf 
   (TCE_w1,TCE); 
   buf 
   (RWE_w1,WE); 
   buf 
   (TRWE_w1,TWE); 
   buf 
   (BYM_w1[0],BWM[0]), 
   (BYM_w1[1],BWM[1]), 
   (BYM_w1[2],BWM[2]), 
   (BYM_w1[3],BWM[3]), 
   (BYM_w1[4],BWM[4]), 
   (BYM_w1[5],BWM[5]), 
   (BYM_w1[6],BWM[6]), 
   (BYM_w1[7],BWM[7]), 
   (BYM_w1[8],BWM[8]), 
   (BYM_w1[9],BWM[9]), 
   (BYM_w1[10],BWM[10]), 
   (BYM_w1[11],BWM[11]), 
   (BYM_w1[12],BWM[12]), 
   (BYM_w1[13],BWM[13]), 
   (BYM_w1[14],BWM[14]), 
   (BYM_w1[15],BWM[15]); 
   buf 
   (TBYM_w1[0],TBWM[0]), 
   (TBYM_w1[1],TBWM[1]), 
   (TBYM_w1[2],TBWM[2]), 
   (TBYM_w1[3],TBWM[3]), 
   (TBYM_w1[4],TBWM[4]), 
   (TBYM_w1[5],TBWM[5]), 
   (TBYM_w1[6],TBWM[6]), 
   (TBYM_w1[7],TBWM[7]), 
   (TBYM_w1[8],TBWM[8]), 
   (TBYM_w1[9],TBWM[9]), 
   (TBYM_w1[10],TBWM[10]), 
   (TBYM_w1[11],TBWM[11]), 
   (TBYM_w1[12],TBWM[12]), 
   (TBYM_w1[13],TBWM[13]), 
   (TBYM_w1[14],TBWM[14]), 
   (TBYM_w1[15],TBWM[15]); 
   buf 
   (ADDR_w1[0],A[0]), 
   (ADDR_w1[1],A[1]), 
   (ADDR_w1[2],A[2]), 
   (ADDR_w1[3],A[3]), 
   (ADDR_w1[4],A[4]), 
   (ADDR_w1[5],A[5]), 
   (ADDR_w1[6],A[6]), 
   (ADDR_w1[7],A[7]), 
   (ADDR_w1[8],A[8]), 
   (ADDR_w1[9],A[9]), 
   (ADDR_w1[10],A[10]), 
   (ADDR_w1[11],A[11]); 
   buf 
   (TADDR_w1[0],TA[0]), 
   (TADDR_w1[1],TA[1]), 
   (TADDR_w1[2],TA[2]), 
   (TADDR_w1[3],TA[3]), 
   (TADDR_w1[4],TA[4]), 
   (TADDR_w1[5],TA[5]), 
   (TADDR_w1[6],TA[6]), 
   (TADDR_w1[7],TA[7]), 
   (TADDR_w1[8],TA[8]), 
   (TADDR_w1[9],TA[9]), 
   (TADDR_w1[10],TA[10]), 
   (TADDR_w1[11],TA[11]); 
   buf 
   (DIN_w1[0],D[0]), 
   (DIN_w1[1],D[1]), 
   (DIN_w1[2],D[2]), 
   (DIN_w1[3],D[3]), 
   (DIN_w1[4],D[4]), 
   (DIN_w1[5],D[5]), 
   (DIN_w1[6],D[6]), 
   (DIN_w1[7],D[7]), 
   (DIN_w1[8],D[8]), 
   (DIN_w1[9],D[9]), 
   (DIN_w1[10],D[10]), 
   (DIN_w1[11],D[11]), 
   (DIN_w1[12],D[12]), 
   (DIN_w1[13],D[13]), 
   (DIN_w1[14],D[14]), 
   (DIN_w1[15],D[15]); 
   buf 
   (TDIN_w1[0],TD[0]), 
   (TDIN_w1[1],TD[1]), 
   (TDIN_w1[2],TD[2]), 
   (TDIN_w1[3],TD[3]), 
   (TDIN_w1[4],TD[4]), 
   (TDIN_w1[5],TD[5]), 
   (TDIN_w1[6],TD[6]), 
   (TDIN_w1[7],TD[7]), 
   (TDIN_w1[8],TD[8]), 
   (TDIN_w1[9],TD[9]), 
   (TDIN_w1[10],TD[10]), 
   (TDIN_w1[11],TD[11]), 
   (TDIN_w1[12],TD[12]), 
   (TDIN_w1[13],TD[13]), 
   (TDIN_w1[14],TD[14]), 
   (TDIN_w1[15],TD[15]); 
   buf 
   (Q[0],DOUT_w[0]), 
   (Q[1],DOUT_w[1]), 
   (Q[2],DOUT_w[2]), 
   (Q[3],DOUT_w[3]), 
   (Q[4],DOUT_w[4]), 
   (Q[5],DOUT_w[5]), 
   (Q[6],DOUT_w[6]), 
   (Q[7],DOUT_w[7]), 
   (Q[8],DOUT_w[8]), 
   (Q[9],DOUT_w[9]), 
   (Q[10],DOUT_w[10]), 
   (Q[11],DOUT_w[11]), 
   (Q[12],DOUT_w[12]), 
   (Q[13],DOUT_w[13]), 
   (Q[14],DOUT_w[14]), 
   (Q[15],DOUT_w[15]); 
   buf 
   (RM_w1[0],RM[0]), 
   (RM_w1[1],RM[1]), 
   (RM_w1[2],RM[2]); 
   buf 
   (WM_w1[0],WM[0]), 
   (WM_w1[1],WM[1]), 
   (WM_w1[2],WM[2]); 
   buf 
   (RA_w1,RA); 
   buf 
   (LV_w1,LVTEST); 
   buf 
   (SZ_w,SZ); 
   buf 
   (SL_w,SL); 
   buf 
   (FC1A_w[0],BADIO[0]), 
   (FC1A_w[1],BADIO[1]), 
   (FC1A_w[2],BADIO[2]), 
   (FC1A_w[3],BADIO[3]), 
   (FC1A_w[4],BADIO[4]), 
   (FC1A_w[5],BADIO[5]), 
   (FC1A_w[6],BADIO[6]), 
   (FC1A_w[7],BADIO[7]), 
   (FC1A_w[8],BADIO[8]), 
   (FC1A_w[9],BADIO[9]), 
   (FC1A_w[10],BADIO[10]), 
   (FC1A_w[11],BADIO[11]), 
   (FC1A_w[12],BADIO[12]), 
   (FC1A_w[13],BADIO[13]), 
   (FC1A_w[14],BADIO[14]), 
   (FC1A_w[15],BADIO[15]); 
   buf 
   (HN_w,HN); 
   buf 
   (SD_w,SD); 
   buf 
   (VSB1_w,VSB100); 
   buf 
   (VSB2_w,VSB200); 
   buf 
   (VSB3_w,VSB300); 
   buf 
   (VSB4_w,VSB400); 



    assign  ADDR_w = BIST_w ? TADDR_w1 : ADDR_w1;
    assign  DIN_w = BIST_w ? TDIN_w1 : DIN_w1;
    assign  RWE_w = BIST_w ? TRWE_w1 : RWE_w1; 
    assign  CE_w = BIST_w ? TCE_w1 : CE_w1;
    assign  CLK_w = BIST_w ? TCLK_w1 : CLK_w1;

    assign  BYM_w = BIST_w ? TBYM_w1 : BYM_w1; 
    assign DOUT_w =   (BIST_w == 0 ) ? (AWT_w == 1 && CLK_w == 1'b0 ) ?  DIN_w1 : DOUT_int : (AWT_w == 1 && CLK_w == 1'b0 ) ? TDIN_w1: DOUT_int;

    //////////////////////////////////////////////
    // tasks
    //////////////////////////////////////////////
    //////////////////
    task update_modes;
    begin
        memory_active = CE_int && !SD && !HN && !SL && !SZ && VSB100 !== 1'bx && VSB200 !== 1'bx && VSB300 !== 1'bx && VSB400 !== 1'bx  && ( VSB100 != 1'b0 | VSB200 != 1'b0 | VSB300 != 1'b0 | VSB400 != 1'b0);
        memory_active_x = CE_int ;
        ram_mode = memory_active ;
        ram_mode_x = memory_active_x ;
        ram_write_mode = ram_mode && RWE_int;
        ram_read_mode  = ram_mode && !RWE_int;
    end
    endtask

    //////////////////
    task latch_inputs;
    begin
        RWE_int = RWE_w;
        CE_int = CE_w;
        ADDR_int = ADDR_w;
        DIN_int = DIN_w;
        BYM_int = BYM_w;
        RM_int[0] = RM_w1[0];
        RM_int[1] = RM_w1[1];
        RM_int[2] = RM_w1[2];
      k = 0;
      for (i=0; i < D_WIDTH; i=i+1)
      begin
      if (FC1A_w[i] == 1 || k == 1 ) begin
      FC1A_int[i] =  1'b1 ;
      k = 1;
      end
      else begin
      FC1A_int[i] =  FC1A_w[i] ;
      end
      end
    end
    endtask

    //////////////////
    task x_memory;
    integer i;
    begin
                   if ((HN_w == 1'b0 && SL_w == 1'b0 && SZ_w == 1'b0) | SD_w == 1'b1 | SD_w === 1'bx | HN_w === 1'bx | SL_w === 1'bx | SZ_w === 1'bx) begin
if (MESSAGE)        $display("			Time %t (MD): Entire memory invalidated", $realtime);
                   end 
        for (i=0; i < WORDS; i=i+1)
        begin
                   if ((HN_w == 1'b0 && SL_w == 1'b0 && SZ_w == 1'b0) | SD_w == 1'b1 | SD_w === 1'bx | HN_w === 1'bx | SL_w === 1'bx | SZ_w === 1'bx) begin
          MEM_ARRAY[i] = DATAnRED_WIDTH_X;
                   end 
        end
    end
    endtask

    //////////////////
    task x_memory_force;
    integer i;
    begin
    if (MESSAGE)        $display("			Time %t (MD): Entire memory invalidated", $realtime);
    for (i=0; i < WORDS; i=i+1)
        begin
          MEM_ARRAY[i] = DATAnRED_WIDTH_X;
        end
    end
    endtask

    //////////////////
    task zero_memory;
    integer i;
    begin
if (MESSAGE)      $display("	Time %t (MD): Entire memory invalidated", $realtime);
      for (i=0; i < WORDS; i=i+1)
      begin
          MEM_ARRAY[i] = DATAnRED_WIDTH_0;
      end
    end
    endtask



    //////////////////
    task x_ram_output;
    begin
if (MESSAGE)          $display("			Time %t (MD): RAM mode output Q invalidated", $realtime);
//          write_mask_enable = DATA_WIDTH_X; 
          DOUT_int = DATA_WIDTH_X;
    end
    endtask

    //////////////////
    task zero_all_outputs;
    begin
if (MESSAGE)          $display("			Time %t (MD): All outputs zeroed out", $realtime);
//          write_mask_enable = DATA_WIDTH_X; 
          DOUT_int = DATA_WIDTH_0;
    end
    endtask

    task one_all_outputs;
    begin
if (MESSAGE)          $display("			Time %t (MD): All outputs one", $realtime);
//          write_mask_enable = DATA_WIDTH_X; 
          DOUT_int = DATA_WIDTH_1;
    end
    endtask

    //////////////////
    task ram_mode_cycle;
    begin //{
      // RAM Mode Operation
      if (ram_mode == 1'b1) begin //{ Read Operation 

        // Read Operation
        if (ram_read_mode === 1'b1 & read_disable ) begin 
            read_memory;
        end 

        // Write Operation
        else if (ram_write_mode == 1'b1 & write_disable ) begin //{
            write_mask;
        end //}

        // Unknown Read or Write Operation
        else begin//{
          if (ram_write_mode === 1'bx) begin //{
              if (good_address(ADDR_int)) begin //{
                MEM_ARRAY[ADDR_int]= DATAnRED_WIDTH_X;
              end //}
              else begin //{
                x_memory;
              end //}
            x_ram_output;
          end //}
        end //}
      end //}

      // Unknown ram_mode 
      else if (ram_mode === 1'bx) begin //{
        if ( CE_int === 1'bx ) begin//{
             x_memory;
if (MESSAGE)             $display("      Time %t (MD): Unknown CEN and also check TEST_EN for Unknown ", $realtime);
        end//}
        x_ram_output;
      end //}

      // Other ram_mode 
      else begin //{
        casez({CE_int})
          1'b0:  // memory not enabled
          begin //{
            if (prev_CE == 1'b1) begin
if (MESSAGE)              $display("  Time %t (MD): Memory read port disabled", $realtime);
            end
          end //}
          default: ; // no-action
        endcase
      end //}
    end //}
    endtask

    //////////////////
    task read_memory;
    integer i, k;
    begin
      if (good_address(ADDR_int))  begin
        if (RM_int[0] !== 1'bx && RM_int[1] !== 1'bx && RM_int[2] !== 1'bx) begin

        DATAnRED = MEM_ARRAY[ADDR_int];
        DATAnREDL = DATAnRED[15 + RED_BITS:0];
        DATAnREDR = DATAnRED[(D_WIDTH-1) + RED_BITS*2:(16 + RED_BITS)];
`ifndef dont_x_outputs
        DOUT_int = DATA_WIDTH_X;
`endif

        //left
        if (FC1A_int > 0 ) begin//{
          k=0;
          for (i = 0; i < 16; i = i+1) begin//{
            if (FC1A_int[i] == 0 ) begin
              DATAL[i] = DATAnREDL[k];
              k = k+1;
            end
            else if (FC1A_int[i] == 1 ) begin
              DATAL[i] = DATAnREDL[k+RED_BITS];
              k = k+1;
            end
          end//}
        end//}
        else if (FC1A_int < 1) begin//{
              DATAL[15:0] = DATAnREDL[15:0];
        end//}
    


        #0.001
        DOUT_int = {DATAL};
        end
      end
      else begin//{
if (MESSAGE)        $display("	Time %t (MD): Warning: Unknown address during read.", $realtime);
        x_ram_output;
      end//}
    end
    endtask



    /////////////////////
    function good_address;
    input [ADDRESS_BITS-1:0] addr;
    begin
        good_address = (^(addr) !== 1'bx);
    end
    endfunction

    //////////////////
    task write_mask;
    integer i, k;
    begin//{

      write_mask_enable = DOUT_int;

      if (good_address(ADDR_int))  begin//{
        if (RM_int[0] !== 1'bx && RM_int[1] !== 1'bx && RM_int[2] !== 1'bx) begin
        DATAnRED = MEM_ARRAY[ADDR_int];
        DATAnREDL = DATAnRED[15 + RED_BITS:0];
        DATAnREDR = DATAnRED[(D_WIDTH - 1) + RED_BITS*2:(16 + RED_BITS)];

      //left
      DINL = DIN_int[15:0];
      BYML = BYM_int[15:0];
      if (FC1A_int > 0) begin//{
        k=0;
        for (i = 0; i < 16; i = i + 1) begin//{ 
          if (FC1A_int[i] == 0) begin//{
            if (BYML[i] == 1'b0) begin
              if (DINL[i] === 1'bx) begin
                DATAnREDL[k] = DATA_WIDTH_XBY;
              end
              else begin
                DATAnREDL[k] = DINL[i];
              end
            end
            else begin 
              if (BYML[i] === 1'bx) begin
                DATAnREDL[k] = DATA_WIDTH_XBY;
              end
            end
            k=k+1;
          end//}
          else if (FC1A_int[i] == 1) begin//{
            if (BYML[i] == 1'b0) begin
              if (DINL[i] === 1'bx) begin
                DATAnREDL[k+RED_BITS] = DATA_WIDTH_XBY;
              end
              else begin
                DATAnREDL[k+RED_BITS] = DINL[i];
              end
            end
            else begin 
              if (BYML[i] === 1'bx) begin
                DATAnREDL[k+RED_BITS] = DATA_WIDTH_XBY;
              end
            end
            k = k+1;
          end//}
        end//}
      end//}
      else if (FC1A_int < 1) begin//{
        k=0;
        for (i = 0; i < 16; i = i + 1) begin//{
            if (BYML[i] == 1'b0) begin
            if (DINL[i] === 1'bx) begin
              DATAnREDL[k] = DATA_WIDTH_XBY;
            end
            else begin
              DATAnREDL[k] = DINL[i];
            end
          end
          else begin 
            if (BYML[i] === 1'bx) begin
              DATAnREDL[k] = DATA_WIDTH_XBY;
            end
          end
          k = k+1;
        end//}
      end//}


      for (i = 0; i < D_WIDTH; i = i+1) begin//{
            if (BYM_int[i] == 1'b0) begin
          write_mask_enable[i] = DIN_int[i];
        end
        else begin
          if ( BYM_int[i] === 1'bx )  begin
            write_mask_enable[i] = DATA_WIDTH_XBY;
          end
        end
      end//}


        //left
        if (FC1A_int > 0) begin//{
          k=0;
          for (i = 0; i < 16; i = i+1) begin//{
            if (FC1A_int[i] == 0) begin
              DATAL[i] = DATAnREDL[k];
              k = k+1;
            end
            else if (FC1A_int[i] == 1) begin
              DATAL[i] = DATAnREDL[k+RED_BITS];
              k = k+1;
            end
          end//}
        end//}
        else if (FC1A_int < 1) begin//{
              DATAL[15:0] = DATAnREDL[15+RED_BITS:RED_BITS];
        end//}
    

      DATAnRED = {DATAnREDL};
     
        MEM_ARRAY[ADDR_int] = DATAnRED;
        end
      end//}
      else begin//{
if (MESSAGE)        $display("	Time %t (MD): Warning: Unknown address during write.", $realtime);
        x_memory;
        x_ram_output;
      end//}
    end//}
    endtask



    //////////////////
    function good_data_in;
        input [D_WIDTH-1:0] din;
    begin
        good_data_in = (^(din) !== 1'bx);
    end
    endfunction

`ifdef  rtl_functionality_1
`else
    // Violation processors
    //////////////////////////////////////////////
    // CHIP-ENABLE violator
    always @(CE_notifier)
    begin
                     write_disable = #0.001 `NO; 
                     read_disable = #0.001 `NO; 
if (MESSAGE)          $display ("			Time %t (MD): CE timing violated. Everything invalidated.", $realtime);
                     x_memory;
                     x_ram_output;
    end
    // POWER-DOWN SNOOZE violator
    always @(SZ_notifier)
    begin
                     write_disable = #0.001 `NO; 
                     read_disable = #0.001 `NO; 
if (MESSAGE)        $display ("			Time %t (MD): SZ timing violated. Output invalidated.", $realtime);
                     x_ram_output;
                     x_memory;
    end
    // POWER-DOWN SLUMBER violator
    always @(SL_notifier)
    begin
                     write_disable = #0.001 `NO; 
                     read_disable = #0.001 `NO; 
if (MESSAGE)        $display ("			Time %t (MD): SL timing violated. Output invalidated.", $realtime);
                     x_ram_output;
                     x_memory;
    end
    // POWER-DOWN HIBERNATE violator
    always @(HN_notifier)
    begin
                     write_disable = #0.001 `NO; 
                     read_disable = #0.001 `NO; 
if (MESSAGE)        $display ("			Time %t (MD): HN timing violated. Output invalidated.", $realtime);
                     x_ram_output;
                     x_memory;
    end
    // POWER-DOWN SHUTDOWN violator
    always @(SD_notifier)
    begin
                     write_disable = #0.001 `NO;
                     read_disable = #0.001 `NO;
if (MESSAGE)        $display ("                   Time %t (MD): SD timing violated. Everything invalidated.", $realtime);
                     x_ram_output;
                     x_memory;
    end
    // ADDRESS violator
    always @(ADDR_notifier)
    begin
                     write_disable = #0.001 `NO; 
                     read_disable = #0.001 `NO; 
       if ( RWE_int )  begin
if (MESSAGE)        $display ("			Time %t (MD): Address timing violated during memory write.", $realtime);
        x_memory;
        x_ram_output;
       end
       else
       begin
if (MESSAGE)        $display ("			Time %t (MD): Address timing violated during memory read.", $realtime);
        x_ram_output;
       end
    end

    // DATA violator
    always @(DIN_notifier)
    begin//{
      write_disable = #0.001 `NO; 
      read_disable = #0.001 `NO; 
      if (good_address(ADDR_int)) begin//{
if (MESSAGE)        $display ("	Time %t (MD): Data timing violated during memory write. Invalidating write location. %h", $realtime, ADDR_int);
        DATAnRED = MEM_ARRAY[ADDR_int];
        DATAnREDL = DATAnRED[15 + RED_BITS:0];
        DATAnREDR = DATAnRED[(D_WIDTH - 1) + RED_BITS*2:(16 + RED_BITS)];

        //left 
        BYML = BYM_int[15:0];
        if (FC1A_int > 0) begin//{
          k = 0;
          for (i = 0; i < 16; i = i + 1) begin//{
            if (BYML[i] == 1'b0) begin
              if (FC1A_int[i] == 0 ) begin
                DATAnREDL[k]=DATA_WIDTH_XBY;
              end
              else if (FC1A_int[i] == 1) begin
                DATAnREDL[k+RED_BITS]=DATA_WIDTH_XBY;
              end
            end
            k = k + 1;
          end//}
        end//}
        else if (FC1A_int <  1) begin//{
          k = 0;
          for (i = 0; i < 16; i = i + 1) begin//{
            if (BYML[i] == 1'b0) begin
              DATAnREDL[k]=DATA_WIDTH_XBY;
            end
            k = k + 1;
          end//}
        end//}


      DATAnRED = {DATAnREDL};
      MEM_ARRAY[ADDR_int] = DATAnRED;
      x_ram_output;
      end//}
      else begin//{
if (MESSAGE)        $display ("	Time %t (MD): DA Data timing violated during memory write and address unknown. Invalidating entire memory.", $realtime);
        x_memory;
        x_ram_output;
      end//}
    end//}

    //MASKING violator
    always @(BYM_notifier)
    begin//{
      write_disable = #0.001 `NO; 
      read_disable = #0.001 `NO; 
      if (good_address(ADDR_int)) begin//{
if (MESSAGE)        $display ("	Time %t (MD): BYM Data timing violated during memory write. Invalidating write location. %h", $realtime, ADDR_int);
        MEM_ARRAY[ADDR_int]=DATAnRED_WIDTH_X;
      end//}
      else begin//{
if (MESSAGE)        $display ("	Time %t (MD): BYM Data timing violated during memory write and address unknown. Invalidating entire memory.", $realtime);
        x_memory;
      end//}
        x_ram_output;
    end//}

    // CLK violator
always @(CLK_notifier)
    begin
                     write_disable = #0.001 `NO; 
                     read_disable = #0.001 `NO; 
if (MESSAGE)         $display ("			Time %t (MD): CLK timing violated during memory read or write.", $realtime);
                     x_memory;
                     x_ram_output;
    end

    // READ-WRITE violator
    always @(RWB_notifier)
    begin
                     write_disable = #0.001 `NO; 
                     read_disable = #0.001 `NO; 
if (MESSAGE)           $display ("			Time %t (MD): WE timing violated during ram mode.", $realtime);
        x_ram_output;
        if (good_address(ADDR_int))
            begin
                // don't know if read or write desired; x specified address
if (MESSAGE)                  $display ("			Time %t (MD): Invalidating address %h", $realtime, ADDR_int);
                    MEM_ARRAY[ADDR_int]=DATAnRED_WIDTH_X;
            end
            else
            begin
                // don't know if read or write desired; address bad as well; x entire memory
                // since entire memory invalidated
                x_memory;
            end
    end
    // RM setup/hold violator
    always @(RM_notifier)
    begin
                     write_disable = `NO; 
                     read_disable = `NO; 
if (MESSAGE)        $display ("			Time %t (MD): RM timing violated. Everything invalidated.", $realtime);
                     x_ram_output;
                     x_memory;
    end
    //  recrem violator
    always @(BADIO_notifier)
    begin
                     write_disable = `NO; 
                     read_disable = `NO; 
if (MESSAGE)        $display ("			Time %t (MD): BADIO timing violated. Everything invalidated.", $realtime);
                     x_ram_output;
                     x_memory;
    end
`endif

    //////////////////////////////////////////////
    // Main
    //////////////////////////////////////////////

    always @(CLK_w)
    begin//{
        casez({prev_CLK, CLK_w}) //{
            2'b01:                          // good edge
            begin
                latch_inputs;
                update_modes;
                ram_mode_cycle;
            end

            2'b10, 2'bx?:    // benign edges; nothing to do
            begin
            end

            2'b?x:            // clock goes X
            begin
                x_ram_output;
                x_memory;
            end
        endcase //}
        // remember current states to use in next clock transition
        prev_CLK = CLK_w;
        prev_CE = CE_int;
    end//}

`ifdef  rtl_functionality_1
`else
    specify
    specparam

        Ttens_rise = 0.6,
        Ttens_fall = 0.5,
        Ttenh_rise = 0.6,
        Tbms = 0.6,
        Tbmx = 0.5,
        Tch = 100.0,
        Tcl  = 100.0,
        Tcc = 200.0,
        Tces_rise = 0.6,
        Tces_fall = 0.5,
        Tceh_rise = 0.6,
        Tceh_fall = 0.5,
        Trwcs_rise = 0.6,
        Trwcs_fall = 0.5,
        Trwch_rise = 0.6,
        Trwch_fall = 0.5,
        Tbyms_rise = 0.6,
        Tbyms_fall = 0.5,
        Tbymh_rise = 0.6,
        Tbymh_fall = 0.5,
        Tacs_rise = 0.6,
        Tacs_fall = 0.5,
        Tach_rise = 0.6,
        Tach_fall = 0.5,
        Tdcs_rise = 0.6,
        Tdcs_fall = 0.5,
        Tdch_rise = 0.6,
        Tdch_fall = 0.5,
        Tcqh = 4.5,
        Tcql = 4.5,
        Tcqxh = 3.5,
        Tcqxl = 3.5,
        Trmcs_rise = 0.6,
        Trmcs_fall = 0.5,
        Trmch_rise = 0.6,
        Trmch_fall = 0.5,
        Twmcs_rise = 0.6,
        Twmcs_fall = 0.5,
        Twmch_rise = 0.6,
        Twmch_fall = 0.5,
        Tracs_rise = 0.6,
        Tracs_fall = 0.5,
        Trach_rise = 0.6,
        Trach_fall = 0.5,
        Tlvcs_rise = 0.6,
        Tlvcs_fall = 0.5,
        Tlvch_rise = 0.6,
        Tlvch_fall = 0.5,
        Tszrch = 0.6,
        Tszrcl = 0.5,
        Tszrmh = 0.6,
        Tszrml = 0.5,
        Tslrch = 0.6,
        Tslrcl = 0.5,
        Tslrmh = 0.6,
        Tslrml = 0.5,
        Tbiosh = 0.6,
        Tbiosl = 0.5,
        Tbiohh = 0.6,
        Tbiohl = 0.5,
        Thnrch = 0.6,
        Thnrcl = 0.5,
        Thnrmh = 0.6,
        Thnrml = 0.5,
        Tsdrch = 0.6,
        Tsdrcl = 0.5,
        Tsdrmh = 0.6,
        Tsdrml = 0.5,
        Tvbcs_rise = 0.6,
        Tvbcs_fall = 0.5,
        Tvbch_rise = 0.6,
        Tvbch_fall = 0.5;

        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[0]:Q[0]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[1]:Q[1]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[2]:Q[2]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[3]:Q[3]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[4]:Q[4]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[5]:Q[5]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[6]:Q[6]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[7]:Q[7]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[8]:Q[8]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[9]:Q[9]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[10]:Q[10]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[11]:Q[11]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[12]:Q[12]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[13]:Q[13]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[14]:Q[14]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( WE==1'B0 && CE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B0 )
            (posedge CLK => (Q[15]:Q[15]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[0] => (Q[0]+:Q[0]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[1] => (Q[1]+:Q[1]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[2] => (Q[2]+:Q[2]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[3] => (Q[3]+:Q[3]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[4] => (Q[4]+:Q[4]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[5] => (Q[5]+:Q[5]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[6] => (Q[6]+:Q[6]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[7] => (Q[7]+:Q[7]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[8] => (Q[8]+:Q[8]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[9] => (Q[9]+:Q[9]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[10] => (Q[10]+:Q[10]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[11] => (Q[11]+:Q[11]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[12] => (Q[12]+:Q[12]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[13] => (Q[13]+:Q[13]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[14] => (Q[14]+:Q[14]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B0 )
            (D[15] => (Q[15]+:Q[15]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[0] => (Q[0]+:Q[0]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[1] => (Q[1]+:Q[1]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[2] => (Q[2]+:Q[2]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[3] => (Q[3]+:Q[3]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[4] => (Q[4]+:Q[4]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[5] => (Q[5]+:Q[5]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[6] => (Q[6]+:Q[6]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[7] => (Q[7]+:Q[7]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[8] => (Q[8]+:Q[8]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[9] => (Q[9]+:Q[9]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[10] => (Q[10]+:Q[10]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[11] => (Q[11]+:Q[11]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[12] => (Q[12]+:Q[12]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[13] => (Q[13]+:Q[13]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[14] => (Q[14]+:Q[14]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( AWT==1'B1 && BISTE==1'B1 )
            (TD[15] => (Q[15]+:Q[15]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[0]:Q[0]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[1]:Q[1]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[2]:Q[2]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[3]:Q[3]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[4]:Q[4]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[5]:Q[5]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[6]:Q[6]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[7]:Q[7]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[8]:Q[8]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[9]:Q[9]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[10]:Q[10]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[11]:Q[11]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[12]:Q[12]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[13]:Q[13]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[14]:Q[14]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);
        if ( TWE==1'B0 && TCE==1'B1 && AWT==1'B0 && SL==1'B0 && SZ==1'B0 && HN==1'B0 && SD==1'B0 && BISTE==1'B1 )
            (posedge TCLK => (Q[15]:Q[15]))=(Tcqh, Tcql, Tcqxh, Tcqxh, Tcqxl, Tcqxl);

        $period (posedge CLK &&& NslANszANhnANsdANbiste, Tcc, CLK_notifier);
        $width (posedge  CLK &&& NslANszANhnANsdANbiste, Tch, 0, CLK_notifier);
        $width (negedge  CLK &&& NslANszANhnANsdANbiste, Tcl, 0, CLK_notifier);
 
        $period (posedge TCLK &&& NslANszANhnANsdAbiste, Tcc, CLK_notifier);
        $width (posedge  TCLK &&& NslANszANhnANsdAbiste, Tch, 0, CLK_notifier);
        $width (negedge  TCLK &&& NslANszANhnANsdAbiste, Tcl, 0, CLK_notifier);
 
        $setuphold (posedge CLK &&& ce, posedge BISTE, Ttens_rise, Ttenh_rise, BIST_notifier);
        $setuphold (posedge CLK &&& ce, negedge BISTE, Ttens_fall, Ttens_fall, BIST_notifier);
        $setuphold (posedge TCLK &&& tce, posedge BISTE, Ttens_rise, Ttenh_rise, BIST_notifier);
        $setuphold (posedge TCLK &&& tce, negedge BISTE, Ttens_fall, Ttens_fall, BIST_notifier);
        $setuphold (posedge CLK &&& ce, posedge AWT, Tbms, Tbms, BISTM_notifier);
        $setuphold (posedge CLK &&& ce, negedge AWT, Tbmx, Tbmx, BISTM_notifier);
        $setuphold (posedge TCLK &&& tce, posedge AWT, Tbms, Tbms, BISTM_notifier);
        $setuphold (posedge TCLK &&& tce, negedge AWT, Tbmx, Tbmx, BISTM_notifier);
        $setuphold (posedge CLK &&& NslANszANhnANsdANbiste, posedge CE, Tces_rise, Tceh_rise, CE_notifier);
        $setuphold (posedge CLK &&& NslANszANhnANsdANbiste, negedge CE, Tces_fall, Tceh_fall, CE_notifier);
        $setuphold (posedge TCLK &&& NslANszANhnANsdAbiste, posedge TCE, Tces_rise, Tceh_rise, CE_notifier);
        $setuphold (posedge TCLK &&& NslANszANhnANsdAbiste, negedge TCE, Tces_fall, Tceh_fall, CE_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge WE, Trwcs_rise, Trwch_rise, RWB_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge WE, Trwcs_fall, Trwch_fall, RWB_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TWE, Trwcs_rise, Trwch_rise, RWB_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TWE, Trwcs_fall, Trwch_fall, RWB_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[0], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[0], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[1], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[1], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[2], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[2], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[3], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[3], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[4], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[4], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[5], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[5], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[6], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[6], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[7], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[7], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[8], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[8], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[9], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[9], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[10], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[10], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[11], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[11], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[12], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[12], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[13], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[13], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[14], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[14], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BWM[15], Tbyms_rise, Tbymh_rise, BYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BWM[15], Tbyms_fall, Tbymh_fall, BYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[0], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[0], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[1], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[1], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[2], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[2], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[3], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[3], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[4], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[4], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[5], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[5], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[6], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[6], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[7], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[7], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[8], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[8], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[9], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[9], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[10], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[10], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[11], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[11], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[12], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[12], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[13], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[13], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[14], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[14], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TBWM[15], Tbyms_rise, Tbymh_rise, TBYM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TBWM[15], Tbyms_fall, Tbymh_fall, TBYM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[0], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[0], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[1], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[1], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[2], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[2], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[3], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[3], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[4], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[4], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[5], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[5], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[6], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[6], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[7], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[7], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[8], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[8], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[9], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[9], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[10], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[10], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge A[11], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge A[11], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[0], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[0], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[1], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[1], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[2], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[2], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[3], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[3], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[4], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[4], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[5], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[5], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[6], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[6], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[7], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[7], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[8], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[8], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[9], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[9], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[10], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[10], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge TA[11], Tacs_rise, Tach_rise, ADDR_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge TA[11], Tacs_fall, Tach_fall, ADDR_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[0], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[0], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[1], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[1], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[2], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[2], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[3], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[3], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[4], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[4], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[5], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[5], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[6], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[6], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[7], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[7], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[8], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[8], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[9], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[9], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[10], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[10], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[11], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[11], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[12], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[12], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[13], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[13], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[14], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[14], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, posedge D[15], Tdcs_rise, Tdch_rise, DIN_notifier);
        $setuphold (posedge CLK &&& weAceANawtANslANszANhnANsdANbiste, negedge D[15], Tdcs_fall, Tdch_fall, DIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[0], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[0], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[1], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[1], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[2], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[2], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[3], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[3], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[4], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[4], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[5], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[5], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[6], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[6], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[7], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[7], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[8], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[8], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[9], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[9], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[10], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[10], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[11], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[11], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[12], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[12], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[13], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[13], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[14], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[14], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, posedge TD[15], Tdcs_rise, Tdch_rise, TDIN_notifier);
        $setuphold (posedge TCLK &&& tweAtceANawtANslANszANhnANsdAbiste, negedge TD[15], Tdcs_fall, Tdch_fall, TDIN_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge RM[0], Trmcs_rise, Trmch_rise, RM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge RM[0], Trmcs_fall, Trmch_fall, RM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge RM[1], Trmcs_rise, Trmch_rise, RM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge RM[1], Trmcs_fall, Trmch_fall, RM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge RM[2], Trmcs_rise, Trmch_rise, RM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge RM[2], Trmcs_fall, Trmch_fall, RM_notifier);
        $setuphold (posedge TCLK, posedge RM[0], Trmcs_rise, Trmch_rise, RM_notifier);
        $setuphold (posedge TCLK, negedge RM[0], Trmcs_fall, Trmch_fall, RM_notifier);
        $setuphold (posedge TCLK, posedge RM[1], Trmcs_rise, Trmch_rise, RM_notifier);
        $setuphold (posedge TCLK, negedge RM[1], Trmcs_fall, Trmch_fall, RM_notifier);
        $setuphold (posedge TCLK, posedge RM[2], Trmcs_rise, Trmch_rise, RM_notifier);
        $setuphold (posedge TCLK, negedge RM[2], Trmcs_fall, Trmch_fall, RM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge WM[0], Twmcs_rise, Twmch_rise, WM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge WM[0], Twmcs_fall, Twmch_fall, WM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge WM[1], Twmcs_rise, Twmch_rise, WM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge WM[1], Twmcs_fall, Twmch_fall, WM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge WM[2], Twmcs_rise, Twmch_rise, WM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge WM[2], Twmcs_fall, Twmch_fall, WM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge WM[0], Twmcs_rise, Twmch_rise, WM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge WM[0], Twmcs_fall, Twmch_fall, WM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge WM[1], Twmcs_rise, Twmch_rise, WM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge WM[1], Twmcs_fall, Twmch_fall, WM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge WM[2], Twmcs_rise, Twmch_rise, WM_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge WM[2], Twmcs_fall, Twmch_fall, WM_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge RA, Tracs_rise, Trach_rise, RA_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge RA, Tracs_fall, Trach_fall, RA_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge RA, Tracs_rise, Trach_rise, RA_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge RA, Tracs_fall, Trach_fall, RA_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge LVTEST, Tlvcs_rise, Tlvch_rise, LV_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge LVTEST, Tlvcs_fall, Tlvch_fall, LV_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge LVTEST, Tlvcs_rise, Tlvch_rise, LV_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge LVTEST, Tlvcs_fall, Tlvch_fall, LV_notifier);
        $setuphold (posedge CLK &&& ce, posedge SZ, Tszrch, Tszrmh, SZ_notifier);
        $setuphold (posedge CLK &&& ce, negedge SZ, Tszrcl, Tszrml, SZ_notifier);
        $setuphold (posedge TCLK &&& tce, posedge SZ, Tszrch, Tszrmh, SZ_notifier);
        $setuphold (posedge TCLK &&& tce, negedge SZ, Tszrcl, Tszrml, SZ_notifier);
        $setuphold (posedge CLK &&& ce, posedge SL, Tslrch, Tslrmh, SL_notifier);
        $setuphold (posedge CLK &&& ce, negedge SL, Tslrcl, Tslrml, SL_notifier);
        $setuphold (posedge TCLK &&& tce, posedge SL, Tslrch, Tslrmh, SL_notifier);
        $setuphold (posedge TCLK &&& tce, negedge SL, Tslrcl, Tslrml, SL_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[0], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[0], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[1], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[1], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[2], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[2], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[3], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[3], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[4], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[4], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[5], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[5], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[6], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[6], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[7], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[7], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[8], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[8], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[9], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[9], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[10], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[10], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[11], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[11], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[12], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[12], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[13], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[13], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[14], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[14], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge BADIO[15], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge BADIO[15], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[0], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[0], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[1], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[1], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[2], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[2], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[3], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[3], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[4], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[4], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[5], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[5], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[6], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[6], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[7], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[7], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[8], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[8], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[9], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[9], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[10], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[10], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[11], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[11], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[12], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[12], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[13], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[13], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[14], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[14], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, posedge BADIO[15], Tbiosh, Tbiohh, BADIO_notifier);
        $setuphold (posedge TCLK &&& tceANslANszANhnANsdAbiste, negedge BADIO[15], Tbiosl, Tbiohl, BADIO_notifier);
        $setuphold (posedge CLK &&& ce, posedge HN, Thnrch, Thnrmh, HN_notifier);
        $setuphold (posedge CLK &&& ce, negedge HN, Thnrcl, Thnrml, HN_notifier);
        $setuphold (posedge TCLK &&& tce, posedge HN, Thnrch, Thnrmh, HN_notifier);
        $setuphold (posedge TCLK &&& tce, negedge HN, Thnrcl, Thnrml, HN_notifier);
        $setuphold (posedge CLK &&& ce, posedge SD, Tsdrch, Tsdrmh, SD_notifier);
        $setuphold (posedge CLK &&& ce, negedge SD, Tsdrcl, Tsdrml, SD_notifier);
        $setuphold (posedge TCLK, posedge SD, Tsdrch, Tsdrmh, SD_notifier);
        $setuphold (posedge TCLK, negedge SD, Tsdrcl, Tsdrml, SD_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge VSB100, Tvbcs_rise, Tvbch_rise, VSB1_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge VSB100, Tvbcs_fall, Tvbch_fall, VSB1_notifier);
        $setuphold (posedge TCLK, posedge VSB100, Tvbcs_rise, Tvbch_rise, VSB1_notifier);
        $setuphold (posedge TCLK, negedge VSB100, Tvbcs_fall, Tvbch_fall, VSB1_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge VSB200, Tvbcs_rise, Tvbch_rise, VSB2_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge VSB200, Tvbcs_fall, Tvbch_fall, VSB2_notifier);
        $setuphold (posedge TCLK, posedge VSB200, Tvbcs_rise, Tvbch_rise, VSB2_notifier);
        $setuphold (posedge TCLK, negedge VSB200, Tvbcs_fall, Tvbch_fall, VSB2_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge VSB300, Tvbcs_rise, Tvbch_rise, VSB3_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge VSB300, Tvbcs_fall, Tvbch_fall, VSB3_notifier);
        $setuphold (posedge TCLK, posedge VSB300, Tvbcs_rise, Tvbch_rise, VSB3_notifier);
        $setuphold (posedge TCLK, negedge VSB300, Tvbcs_fall, Tvbch_fall, VSB3_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, posedge VSB400, Tvbcs_rise, Tvbch_rise, VSB4_notifier);
        $setuphold (posedge CLK &&& ceANslANszANhnANsdANbiste, negedge VSB400, Tvbcs_fall, Tvbch_fall, VSB4_notifier);
        $setuphold (posedge TCLK, posedge VSB400, Tvbcs_rise, Tvbch_rise, VSB4_notifier);
        $setuphold (posedge TCLK, negedge VSB400, Tvbcs_fall, Tvbch_fall, VSB4_notifier);
    endspecify

`endif

endmodule
`endcelldefine


