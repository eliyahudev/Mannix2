/*
###############################################################
#       Generated by:           EnICS Multi Ports SCM Compiler v1.2
#       Generated on:           2020-11-02 21:42:50
#       Design:                         mpscm16_32x32_WP_3_RP_5
#
#       Dimensions:
#       DATA WIDTH:                     32
#       NUM ROWS:                       32
#
#       READ PORTS:                     5
#       WRITE PORTS:            3
#
#       lines in lists:
#       module_scm_text:        294
###############################################################
*/
module mpscm16_32x32_WP_3_RP_5 #(parameter ROWS=32 , ADDR_WIDTH=$clog2(ROWS) , ASYNC_READ=1 , READ_OLD=0, DATA_WIDTH=32 , WP=3 , RP=5) (
        CLK, 
        DIN_WP_0, 
        DIN_WP_1, 
        DIN_WP_2, 
        DOUT_RP_0, 
        DOUT_RP_1, 
        DOUT_RP_2, 
        DOUT_RP_3, 
        DOUT_RP_4, 
        RADDR_RP_0, 
        RADDR_RP_1, 
        RADDR_RP_2, 
        RADDR_RP_3, 
        RADDR_RP_4, 
        SE, 
        WADDR_WP_0, 
        WADDR_WP_1, 
        WADDR_WP_2, 
        WE_WP_0, 
        WE_WP_1, 
        WE_WP_2);
   input CLK;
   input [31:0] DIN_WP_0;
   input [31:0] DIN_WP_1;
   input [31:0] DIN_WP_2;
   output [31:0] DOUT_RP_0;
   output [31:0] DOUT_RP_1;
   output [31:0] DOUT_RP_2;
   output [31:0] DOUT_RP_3;
   output [31:0] DOUT_RP_4;
   input [4:0] RADDR_RP_0;
   input [4:0] RADDR_RP_1;
   input [4:0] RADDR_RP_2;
   input [4:0] RADDR_RP_3;
   input [4:0] RADDR_RP_4;
   input SE;
   input [4:0] WADDR_WP_0;
   input [4:0] WADDR_WP_1;
   input [4:0] WADDR_WP_2;
   input WE_WP_0;
   input WE_WP_1;
   input WE_WP_2;

   logic [DATA_WIDTH-1:0] DIN [0:WP-1];
   logic [DATA_WIDTH-1:0] DOUT [0:RP-1];
   logic [ADDR_WIDTH-1:0] RADDR [0:RP-1];
   logic [ADDR_WIDTH-1:0] WADDR [0:WP-1];
   logic [RP-1:0] RE;
   logic [WP-1:0] WE;

   assign DIN[0] = DIN_WP_0;
   assign DIN[1] = DIN_WP_1;
   assign DIN[2] = DIN_WP_2;

   assign WADDR[0] = WADDR_WP_0;
   assign WADDR[1] = WADDR_WP_1;
   assign WADDR[2] = WADDR_WP_2;

   assign WE[0] = WE_WP_0;
   assign WE[1] = WE_WP_1;
   assign WE[2] = WE_WP_2;

   assign DOUT_RP_0 = DOUT[0];
   assign DOUT_RP_1 = DOUT[1];
   assign DOUT_RP_2 = DOUT[2];
   assign DOUT_RP_3 = DOUT[3];
   assign DOUT_RP_4 = DOUT[4];

   assign RADDR[0] = RADDR_RP_0;
   assign RADDR[1] = RADDR_RP_1;
   assign RADDR[2] = RADDR_RP_2;
   assign RADDR[3] = RADDR_RP_3;
   assign RADDR[4] = RADDR_RP_4;
   
   assign RE[RP-1:0] = {RP{1'b1}};

   mpscm #(.ASYNC_READ(ASYNC_READ)) I_mpscm (
         .CLK(CLK),
         .DIN(DIN),
         .DOUT(DOUT),
         .RADDR(RADDR),
         .WADDR(WADDR),
         .RE(RE),
         .WE(WE),
         .SE(SE)
         );


endmodule
